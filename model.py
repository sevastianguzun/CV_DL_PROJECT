# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/199XpiNgczbuywdGL0xkbfbST1uGpv5WK
"""

import torch
import torch.nn as nn
import torchvision.transforms.functional as TF

class DoubleConv(nn.Module):
  def __init__(self, in_ch, out_ch):
    super(DoubleConv, self).__init__()
    self.conv= nn.Sequential(
      nn.Conv2d(in_ch, out_ch, kernel_size=3, stride=1, padding=1, bias=False),
      nn.BatchNorm2d(out_ch),
      nn.ReLU(True),

      nn.Conv2d(out_ch, out_ch, kernel_size=3, stride=1, padding=1, bias=False),
      nn.BatchNorm2d(out_ch),
      nn.ReLU(inplace=True),
      )

  def forward(self, x):
    return self.conv(x)

class UNet(nn.Module):
  def __init__(self, in_channels = 3, out_channels = 1, features = [64, 128, 256, 512]):
    super(UNet, self).__init__()
    self.ups = nn.ModuleList()
    self.downs = nn.ModuleList()
    self.pool = nn.MaxPool2d(kernel_size=2, stride = 2)

    # down part of a Unet
    for feature in features:
      self.downs.append(DoubleConv(in_channels, feature))
      in_channels = feature

    # up part
    for feature in reversed(features):
      self.ups.append(nn.ConvTranspose2d(feature * 2, feature, kernel_size = 2, stride = 2))
      self.ups.append(DoubleConv(feature * 2, feature))

    # bottom part
    self.bottleneck = DoubleConv(features[-1], features[-1] * 2)

    # last conv
    self.final_conv = nn.Conv2d(features[0], out_channels, kernel_size=1)


  def forward(self, x):
    skip_connections = []

    for down in self.downs:
      x = down(x)
      skip_connections.append(x)
      x = self.pool(x)

    x = self.bottleneck(x)

    skip_connections = skip_connections[::-1]

    for idx in range(len(self.ups) // 2):
      upsample = self.ups[2 * idx]
      double_conv = self.ups[2 * idx + 1]
      skip_connection = skip_connections[idx]

      x = upsample(x)

      if x.shape != skip_connection.shape:
        x = TF.resize(x, size=skip_connection.shape[2:], antialias=True)

      concat_skip = torch.cat((skip_connection, x), dim=1)
      x = double_conv(concat_skip)

    return self.final_conv(x)

def test():
  X = torch.randn((3, 1, 160, 160))
  model = UNet(in_channels=1, out_channels=1)
  preds = model(X)
  print(preds.shape)
  print(X.shape)
  assert preds.shape == X.shape
